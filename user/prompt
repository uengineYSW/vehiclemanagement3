Please implement for this Event Storming Model:

{"_type":"BoundedContext","name":"user","aggregates":[{"aggregateRoot":{"_type":"AggregateRoot","fieldDescriptors":[{"className":"String","name":"name","displayName":"이름","_type":"FieldDescriptor"},{"className":"String","name":"juminNum","displayName":"주민등록번호","_type":"FieldDescriptor"},{"className":"String","name":"birthDate","displayName":"생년월일","_type":"FieldDescriptor"},{"className":"Address","name":"address","displayName":"주소","_type":"FieldDescriptor"}]},"commands":[{"_type":"Command","fieldDescriptors":[{"className":"String","name":"name","_type":"FieldDescriptor"},{"className":"String","name":"juminNum","_type":"FieldDescriptor"},{"className":"String","name":"birthDate","_type":"FieldDescriptor"},{"className":"Address","name":"address","_type":"FieldDescriptor"}],"name":"CreateUserInfo","displayName":"사용자 정보 생성","examples":[{"given":[{"type":"Aggregate","name":"UserInfo","value":{"name":"홍길동","juminNum":"940101-1234567","birthDate":"1994-01-01","address":{"street":"서울특별시 강남구","city":"서울","country":"대한민국"}}}],"when":[{"type":"Event","name":"CreateUserInfo","value":{"name":"홍길동","juminNum":"940101-1234567","birthDate":"1994-01-01","address":{"street":"서울특별시 강남구","city":"서울","country":"대한민국"}}}],"then":[{"type":"Event","name":"UserInfoCreated","value":{"name":"홍길동","juminNum":"940101-1234567","birthDate":"1994-01-01","address":{"street":"서울특별시 강남구","city":"서울","country":"대한민국"}}}]}],"type":"Command"},{"_type":"Command","fieldDescriptors":[{"className":"String","name":"juminNum","_type":"FieldDescriptor"},{"className":"Address","name":"address","_type":"FieldDescriptor"}],"name":"UpdateUserInfo","displayName":"사용자 정보 업데이트","type":"Command"},{"_type":"Command","fieldDescriptors":[{"className":"String","name":"juminNum","_type":"FieldDescriptor"}],"name":"DeleteUserInfo","displayName":"사용자 정보 삭제","type":"Command"}],"events":[{"fieldDescriptors":[{"className":"String","name":"name","_type":"FieldDescriptor"},{"className":"String","name":"juminNum","_type":"FieldDescriptor"},{"className":"String","name":"birthDate","_type":"FieldDescriptor"},{"className":"Address","name":"address","_type":"FieldDescriptor"}],"name":"UserInfoCreated","_type":"Event","displayName":null,"type":"Event"},{"fieldDescriptors":[{"className":"String","name":"juminNum","_type":"FieldDescriptor"},{"className":"Address","name":"address","_type":"FieldDescriptor"}],"name":"UserInfoUpdated","_type":"Event","displayName":null,"type":"Event"},{"fieldDescriptors":[{"className":"String","name":"juminNum","_type":"FieldDescriptor"}],"name":"UserInfoDeleted","_type":"Event","displayName":null,"type":"Event"}],"name":"UserInfo","displayName":"사용자 정보","_type":"Aggregate","type":"Aggregate"}],"policies":[],"displayName":null}

It is necessary to create a DDD-based test file by referring to the given, when, then in the policies example.

I want to utilize following techniques:

- clean architecture
- spring-boot3
- spring-data-rest
- JPA (must use package jakarta.persistence.* instead of javax.persistence.*)
- H2 DB
- Lombok
- Kafka with spring-cloud-streams library 
- JUnit Test


SELF-CRITICISM: 
 - when you create pom.xml, USE correct parent project to spring boot 3
 - when you create pom.xml, you MUST specify the version: 3.1.3 ONLY for the spring-cloud-streams
 - Please generate start from pom.xml


when you create execution shell (run.sh), please add '--no-transfer-progress' option not to output transfer progress if there's mvn command:

```
mvn [command] --no-transfer-progress
```

